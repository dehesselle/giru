#!/usr/bin/env bash
#
# SPDX-FileCopyrightText: 2021 Ren√© de Hesselle <dehesselle@web.de>
#
# SPDX-License-Identifier: GPL-2.0-or-later

### description ################################################################

# Provide initscript-style start/stop for gitlab-runner on macOS.

### shellcheck #################################################################

# Nothing here.

### dependencies ###############################################################

# shellcheck source=bash_d/bash_d.sh
source "$(dirname "$0")"/bash_d/bash_d.sh
bash_d_include daemon
bash_d_include echo
bash_d_include config

### variables ##################################################################

RUNNER_CONFIG_FILE=
RUNNER_BIN=

# shellcheck disable=SC2034 # defined in daemon.sh
DAEMON_NAME=gitlab-runner
# shellcheck disable=SC2034 # defined in daemon.sh
DAEMON_SHUTDOWN_GRACE=60   # runner can take some time to shutdown gracefully

### functions ##################################################################

function source_inline_configuration
{
  grep "^# giru." "$RUNNER_CONFIG_FILE" | cut -c 8-
}

function daemon_print_usage
{
  echo_i "usage: $0 {service} {start|stop|restart|status}"
}

function daemon_run
{
  local log_dir

  # read inline configuration (e.g. giru.log_dir) from runner configuration
  eval "$(grep "^# giru." "$RUNNER_CONFIG_FILE" | cut -c 8-)"

  if [ -z "$log_dir" ]; then
    log_dir=$(xdg_get_cache_home)
    echo_w "using fallback log_dir = $log_dir"
  else
    if [ ! -d "$log_dir" ]; then
      echo_e "directory not usable: log_dir = $log_dir"
      exit 1
    fi
  fi

  local service
  service=$(basename -s .toml "$RUNNER_CONFIG_FILE")

  $RUNNER_BIN run \
    --config "$RUNNER_CONFIG_FILE" \
    --service "$service" \
    1>> "$log_dir/${service}"_stdout.log \
    2>> "$log_dir/${service}"_stderr.log \
    &

  echo $! > "$DAEMON_PIDFILE"
}

function main
{
  local service=$1
  local command=$2

  if [ $# -eq 2 ]; then
    if RUNNER_CONFIG_FILE=$(config_get runner config_dir)/$service.toml; then
      if RUNNER_BIN=$(config_get runner binary); then

        if [ ! -x "$RUNNER_BIN" ]; then
          echo_e "runner not usable: $RUNNER_BIN"
          exit 1
        fi

        if [ -f "$RUNNER_CONFIG_FILE" ]; then
          DAEMON_PIDFILE=$(xdg_get_runtime_dir)/$service.pid
          daemon_dispatch "$command"
        else
          echo_e "no service $service in $(dirname "$RUNNER_CONFIG_FILE")"
          exit 1
        fi
      else
        echo_e "runner|binary missing in $CONFIG_FILE"
        exit 1
      fi
    else
      echo_e "runner|config_dir missing in $CONFIG_FILE"
      exit 1
    fi
  else
    daemon_print_usage
    exit 1
  fi
}

### aliases ####################################################################

# Nothing here.

### main #######################################################################

main "$@"
